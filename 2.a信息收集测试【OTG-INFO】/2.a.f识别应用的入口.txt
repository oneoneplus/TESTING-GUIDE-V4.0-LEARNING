【概述】
    在进行全面的测试之前，枚举应用程序及其攻击面是一个关键的前提条件，因为它可以让测试人员识别出所有脆弱的区域。本节旨在帮助大家识别和映射应用内的某些脆弱区域，一旦识别和映射工作完成之后，我们需要对其进行深入调查。

【目标】
    理解请求如何构造的以及来自Web应用程序的典型响应。

【方法】
    这里我主要是注意所有的HTTP请求（GET和POST），以及传递给应用程序的每个参数和表单字段。查看POST中的参数，需要使用到拦截代理之类的工具。根据作者的经验（估计是国外的孩子），使用拦截代理和电子表格对此阶段的测试非常有用。代理会追踪测试人员和应用之间的每一个请求和响应，可以清楚地看到每个提交和返回的HTTP头、参数等信息。这个过程可能比较费时和乏味，特别针对大型交互式网站。但是经验会指引我们应该改寻找什么，从而大大减少这个阶段的工作量（呵呵一下）
    『电子表格』将URL、自定义HTTP头或请求响应正文中的重要参数记录在电子表格中。这个表格应当包含被请求的页面（加上代理的请求序号可能会更好，以备将来参考）、重要参数、请求类型（POST/GET）、访问是否需要认证、是否使用SSL、是否是某个多步骤流程的一部分，以及其他相关备注。
    (当对Web应用的各个区域了解之后，我们便可以审查这个应用，测试已识别出的每个区域，并记录哪些是有用的，哪些是没用的。指南的剩余部分将会确定如何测试这些区域，但是本节这点讲的测试内容必须在其他测试开始之前执行)
    『注意要点』：
      1.请求
        ——识别何处使用GET请求和使用POST请求
        ——识别POST请求的所有参数（这些参数包含在请求正文中）
        ——要特别注意POST请求中的隐藏参数。（要显示的下一个页面、数据和访问级别可能因隐藏参数的取值不同而不一样）
        ——识别GET请求的所有参数，特别是查询字符串（通常在？符号之后）
        ——在识别多个参数的时候，有些参数需要执行攻击测试。测试人员需要识别所有参数（即使是经过编码或加密的），并确定出哪些参数会被应用程序处理。
        ——同时要注意任何不常见的额外或自定义HTTP头（如debug=false)
      2.响应
        ——确定何处设置、修改或添加了新的cookies（Set-Cookie头）
        ——识别出在正常响应过程（未修改正常请求）中哪些地方出现重定向（3xx HTTP 状态码）、400状态码，特别是403禁止访问和500内部服务器错误。
        ——注意哪些地方使用了有趣的HTTP头。比如，“Server：BIG-IP”表明该站点配置了负载均衡。因此，如果站点是负载均衡的，而且其中服务器没有正确配置，那么测试人员可以发送多次请求以访问存在漏洞的服务器，这取决于所使用负载均衡的类型。
